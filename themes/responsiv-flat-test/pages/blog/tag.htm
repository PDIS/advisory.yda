title = "tag"
url = "/tag/:tag?"
layout = "default"
is_hidden = 0
robot_index = "index"
robot_follow = "follow"

[blogRelated]
slug = "{{ :slug }}"
results = 5
direction = "desc"
postPage = "blog/post"

[blogTagSearch]
tag = "{{ :tag }}"
page = "{{ :page }}"
resultsPerPage = 10
postPage = "blog/post"
categoryPage = "blog/category"

[blogTags]
results = 0
direction = "desc"
==
<?php
function onStart()
{   
    $this->addCss('assets/css/tree.css');

    $this["GOOGLE_CALENDAR_API_KEY"] = !empty($_ENV["GOOGLE_CALENDAR_API_KEY"]) ? $_ENV["GOOGLE_CALENDAR_API_KEY"] : "AIzaSyCohFxIG6E7gPRFzkxaawVJHNvufRFSJuo";
    $this["GOOGLE_CALENDAR_DISCOVERY_DOCS"] = !empty($_ENV["GOOGLE_CALENDAR_DISCOVERY_DOCS"]) ? $_ENV["GOOGLE_CALENDAR_DISCOVERY_DOCS"] : "https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest";
    $this["GOOGLE_CALENDAR_ID"] = !empty($_ENV["GOOGLE_CALENDAR_ID"]) ? $_ENV["GOOGLE_CALENDAR_ID"] : "youyhaw@gmail.com";
    $this["GOOGLE_CALENDAR_TIMEZONE"] = !empty($_ENV["GOOGLE_CALENDAR_TIMEZONE"]) ? $_ENV["GOOGLE_CALENDAR_TIMEZONE"] : "Taipei";
    $this["GOOGLE_CALENDAR_TAG"] = !empty($_ENV["GOOGLE_CALENDAR_TAG"]) ? $_ENV["GOOGLE_CALENDAR_TAG"] : "青諮會網站";
    $this["GOOGLE_CALENDAR_ORDERBY"] = !empty($_ENV["GOOGLE_CALENDAR_ORDERBY"]) ? $_ENV["GOOGLE_CALENDAR_ORDERBY"] : "startTime";
    
    $this['tool'] = new class {
        public function categoriesCheck($categories) {
            foreach ($categories as $category) {
                $name = $category->name;
                if ($name == "文章類" || $name == "會議" || $name == "活動") {
                    return true;
                }
                return false;
            }
        }
    };
}
?>
==
<link href="{{ 'assets/css/meeting-page/meeting-modal.css'|theme }}" rel="stylesheet">
<link href="{{ 'assets/css/meeting-page/meeting-info.css'|theme }}" rel="stylesheet">
<link href="{{ 'assets/css/proposal-page/proposal-page.css'|theme }}" rel="stylesheet">
<link href="{{ 'assets/css/proposal-page/proposal-info.css'|theme }}" rel="stylesheet">
<link href="{{ 'assets/css/proposal-page/track-side.css'|theme }}" rel="stylesheet">
<div class="container">
    {% set tag = 'tag' %}
    <h3>#{{ this.param[tag]}}</h3>
    <div class="info-box">
        <h4>相關委員：</h4>
        {% for user in blogTagSearch.tag.users %}
        <a href="{{ 'test/userpost'|page({ id:user.id }) }}"> <img src="{{user.getAvatarThumb(60)}}" width="75" height="75" style="border-radius:50%;"></a>
        {% endfor %}
    </div>
    <h4><span>相關提案</span></h4>
    <div class="row">
        {% for post in blogTagSearch.posts %}
        {% for category in post.categories %}
        {% if category.id==1%}
        <div class="col-sm-4">
            <div class="thumbnail" data-toggle="modal" data-target="#myModal">
                <div class="caption">
                    <a href="{{ post.url }}" class="display-block">
                        <p class="card-description JQellipsis" align="left">{{ post.title }}</p>
                    </a>
                    {% if post.level == 1 %}
                    {% partial 'progress/proposal' %}
                    <span>提案</span>
                    {%elseif post.level==2%}
                    {% partial 'progress/processing' %}
                    <span>進行中</span>
                    {%elseif post.level==3%}
                    {% partial 'progress/part_of_the_reference' %}
                    <span>部分參採</span>
                    {%elseif post.level==4%}
                    {% partial 'progress/fully_taken' %}
                    <span>完全參採</span>
                    {%elseif post.level==5%}
                    {% partial 'progress/temporarily_not_participating' %}
                    <span>暫不參採</span>
                    {% endif %}
                </div>
            </div>
        </div>
        {% endif %}
        {% endfor %}
        {% endfor %}
        <script src="{{ [      
            'assets/javascript/proposal/JQellipsis.js'
        ]|theme }}"></script>
    </div>
    
    {% if blogTagSearch.posts %}
    <section class="timeline">
        <link href="{{ 'assets/css/proposal-page/track-side.css'|theme }}" rel="stylesheet">
        <link href="{{ 'assets/css/user/track.css'|theme }}" rel="stylesheet">
        <section id="track" class="container">
            <div class="row">
                <a id="AC" accesskey="C" href="#AC" title="中央內容區塊" name="AC">:::</a>
                <h4 class="headline"><span>委員 Tracks</span></h4>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <ul class="timeline" id="timeline_head"></ul>
                </div>
    
                <script src='https://apis.google.com/js/api.js?'></script>
                <script>
                    var timelineHead = document.getElementById('timeline_head');
                    var leftOrRight = true; //left=true ; right=false
                    var existTags = [];
                    {% for tag in blogTags.tags %}
                        existTags.push('{{tag.name}}')
                    {% endfor %}
    
                    function handleClientLoad() {
                        let qTag = '{{ GOOGLE_CALENDAR_TAG }}';
    
                        gapi.client.init({
                            apiKey: '{{ GOOGLE_CALENDAR_API_KEY }}',
                            discoveryDocs: ['{{ GOOGLE_CALENDAR_DISCOVERY_DOCS }}'],
                        }).then(function () {
                            return gapi.client.calendar.events.list({
                                'calendarId': '{{ GOOGLE_CALENDAR_ID }}',
                                'timeZone': '{{ GOOGLE_CALENDAR_TIMEZONE }}',
                                'singleEvents': true,
                                'timeMin': (new Date()).toISOString(), //gathers only events not happened yet
                                // 'maxResults': maxRows, 
                                'q': qTag,
                                'orderBy': '{{ GOOGLE_CALENDAR_ORDERBY }}'
                            });
                        }).then(function (response) {
                            console.log('render');
                            var events = response.result.items;
    
                            for (var i = events.length - 1; i >= 0; i--) {
                                var item = events[i];
    
                                descSplitNewLines = item.description.split('\n');
    
                                var tagCheck = false;
                                var tags = [];
                                descSplitNewLines.forEach(function (descSplitNewLine) {
                                    descSplitSpaces = descSplitNewLine.split(' ');
                                    descSplitSpaces.forEach(function (str) {
                                        reg = str.match(/^#[\u4e00-\u9fa5]+/)
                                        if (reg) {
                                            formalStr = reg[0].replace(/^#/, '');
                                            if (formalStr != qTag) {
                                                var existFlag = false;
                                                if (formalStr == '{{ this.param[tag] }}' && tagCheck == false) {
                                                    tagCheck = true;
                                                }
                                                for (var i = 0; i < existTags.length; i++) {
                                                    existTag = existTags[i];
                                                    if (formalStr == existTag) {
                                                        tags.push(formalStr);
                                                        existFlag = true;
                                                        break;
                                                    }
                                                }
                                                if (!existFlag) {
                                                    console.log('Tag \'' + formalStr + '\'' + ' do not exist !');
                                                }
                                            }
                                        }
                                    })
                                });

                                if (tagCheck) {
    
                                    var tagString = '';
        
                                    tags.forEach(function (tag) {
                                        tagString += '<a href="/blog/tag/' + tag + '">';
                                        tagString += '<span class="label label-success">' + tag + '</span>';
                                        tagString += '</a>';
                                    });
        
                                    var allDay = item.start.date ? true : false;
                                    var startDT = allDay ? item.start.date : item.start.dateTime;
                                    var dateTime = startDT.split("T"); //split date from time
                                    var date = dateTime[0].split("-"); //split yyyy mm dd
                                    var startYear = date[0];
                                    var startMonth = date[1];
                                    var startDay = date[2];
        
                                    generateTimeline('', startYear + '-' + startMonth + '-' + startDay, item.summary, tagString)
                                }
                            }
                            renderPost();
                        }, function (reason) {
                            console.log('Failure');
                            renderPost();
                        });
                    }
    
                    function renderPost() {
                        {% for post in blogTagSearch.tag.posts %}
                        {% if tool.categoriesCheck(post.categories) == true %}
                        var tagString = '';
                        var avatarString = '';
    
                        {% for tag in post.tags %}
                            tagString += '<a href="{{ 'blog/tag'|page({ tag:tag.name }) }}">';
                            tagString += '<span class="label label-success">{{tag.name}}</span>';
                            tagString += '</a>';
                        {% endfor %}
    
                        {% for user in post.getUsers %}
                            avatarString += '<a href="{{ 'test/userpost'|page({ id:user.id }) }}">';
                            avatarString += '<div class="avatar" style="background:url(\'{{user.getAvatarThumb(60)}}\');">';
                            avatarString += '</div>';
                            avatarString += '</a>';
                        {% endfor %}
    
                        generateTimeline('{{ post.url }}', '{{post.published_at|date("Y-m-d")}}', '{{post.title}}', tagString, avatarString);
                        {% endif %}
                        {% endfor %}
    
                        clearfix = document.createElement('li');
                        clearfix.classList.add('clearfix');
                        clearfix.style.float = 'none';
                        timelineHead.appendChild(clearfix);
    
                        document.readyState = "complete";
                    }
    
                    function generateTimeline(url, date, summary, tagString, avatarString = '') {
                        //timeline-panel            
                        postTitle = document.createElement('h2');
                        postTitle.classList.add('timeline-title');
                        postTitle.textContent += summary;
    
                        timeLineBody = document.createElement('div');
                        timeLineBody.classList.add('timeline-body');
                        timeLineBody.appendChild(postTitle);
    
                        timeLineFooter = document.createElement('div');
                        timeLineFooter.classList.add('timeline-footer');
                        timeLineFooter.innerHTML = tagString; //tagString need to use js DOM
    
                        timeLinePanel = document.createElement('div');
                        timeLinePanel.classList.add('timeline-panel');
                        timeLinePanel.appendChild(timeLineBody);
                        timeLinePanel.appendChild(timeLineFooter);
    
                        postLink = document.createElement('a');
                        if (url != '') {
                            postLink.href = url;
                        }
                        postLink.classList.add('display-block');
                        postLink.appendChild(timeLinePanel);
    
                        //avatars
                        profilePicture = document.createElement('div');
                        profilePicture.className = 'profile-picture col-lg-10 col-md-9 col-sm-8 col-xs-12';
                        if (avatarString != '') {
                            profilePicture.innerHTML += avatarString;
                        }
    
                        timeLineDate = document.createElement('div');
                        timeLineDate.className = 'timeline-date col-lg-2 col-md-3 col-sm-4 col-xs-12';
                        timeLineDate.textContent += date;
    
                        colTimeLineDate = document.createElement('div');
                        colTimeLineDate.className = 'col-md-12';
                        colTimeLineDate.appendChild(profilePicture);
                        colTimeLineDate.appendChild(timeLineDate);
    
                        avatars = document.createElement('div');
                        avatars.classList.add('avatars');
                        avatars.appendChild(colTimeLineDate);
    
                        //li.timeline
                        timelineLi = document.createElement('li');
                        if (!leftOrRight) {
                            timelineLi.classList.add("timeline-inverted");
                        }
    
                        timelineLi.appendChild(postLink);
                        timelineLi.appendChild(avatars);
    
                        timelineHead.appendChild(timelineLi);
    
                        leftOrRight ^= true; //toggle to left or right
                    }
    
                    gapi.load('client', handleClientLoad);
                </script>
            </div>
        </section>
    </section>
    {% else %}
    <p>No posts found.</p>
    {% endif %}
</div>